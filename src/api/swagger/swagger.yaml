swagger: "2.0"
info:
  title: Sample NodeJS API
  description: Optional multiline or single-line description
  version: 0.1.9
basePath: "/v2"
tags:
  - name: Register
    description: Register a User
  - name: Login
    description: Login a User
paths:
  /register:
    x-swagger-router-controller: register.controller
    post:
      tags:
        - Register
      summary: Register a User
      description: ""
      operationId: register
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Insert Credentials of the User name, email, paswword"
          required: true
          schema:
            $ref: "#/definitions/Register"
      responses:
        "201":
          description: "User Successfully Registered"
          schema:
            $ref: "#/definitions/RegisterReturn"
        "404":
          description: "User Already Exists"
        "500":
          description: "Internal Server Error"

  /login:
    x-swagger-router-controller: login.controller
    post:
      tags:
        - Login
      summary: Login a User
      description: ""
      operationId: login
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Insert Credentials of the User, email, paswword"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: "User Logged In"
          schema:
            $ref: "#/definitions/LoginReturn"
        "400":
          description: "Incorrect Password"
        "404":
          description: "User Dont Exists"
        "500":
          description: "Internal Server Error"

  /todo-task:
    x-swagger-router-controller: todoTask.controller
    post:
      tags:
        - "Tasks"
      summary: "Add all the required task to be done"
      operationId: "addTodoTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Insert all the details title, description, priority and taskId if any"
          required: true
          schema:
            $ref: "#/definitions/Task"
      security:
        - basicJwtAuth: []
      responses:
        "201":
          description: "User Successfully Registered"
        "404":
          description: "User Already Exists"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    get:
      tags:
        - "Tasks"
      summary: "Get all to do tasks"
      operationId: "getTodoTasks"
      produces:
        - "application/json"
      security:
        - basicJwtAuth: []
      responses:
        "200":
          description: "Fetched all Todo"
        "404":
          description: "Bad Requests"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"

  /complete-task:
    x-swagger-router-controller: completeTask.controller
    post:
      tags:
        - "Tasks"
      summary: "Add all to the complete task"
      operationId: "addToCompleteTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Insert all the details title, description, priority and taskId if any"
          required: true
          schema:
            $ref: "#/definitions/CompleteTask"
      security:
        - basicJwtAuth: []
      responses:
        "201":
          description: "User Successfully Registered"
        "404":
          description: "User Already Exists"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    get:
      tags:
        - "Tasks"
      summary: "Get all completed tasks"
      operationId: "getCompletedTasks"
      produces:
        - "application/json"
      security:
        - basicJwtAuth: []
      responses:
        "200":
          description: "Fetched all Completed tasks"
        "404":
          description: "Bad Requests"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"

  /pending-task:
    x-swagger-router-controller: pendingTask.controller
    post:
      tags:
        - "Tasks"
      summary: "Add all to the complete task"
      operationId: "addToPendingtask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Insert all the details title, description, priority and taskId if any"
          required: true
          schema:
            $ref: "#/definitions/CompleteTask"
      security:
        - basicJwtAuth: []
      responses:
        "201":
          description: "User Successfully Registered"
        "404":
          description: "User Already Exists"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    get:
      tags:
        - "Tasks"
      summary: "Get all pending tasks"
      operationId: "getPendingTask"
      produces:
        - "application/json"
      security:
        - basicJwtAuth: []
      responses:
        "200":
          description: "Fetched all Completed tasks"
        "404":
          description: "Bad Requests"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
definitions:
  Register:
    type: object
    required:
      - name
      - email
      - password
    properties:
      name:
        type: string
        example: John
      email:
        type: string
        example: a@123.com
      password:
        type: string
        example: AbraKaajshdi
  Login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: ayushmukho@gmail.com
      password:
        type: string
        example: Ayush@010202
  Task:
    type: object
    required:
      - priority
      - description
      - title
      - dueDate
    properties:
      priority:
        type: integer
        minimum: 1
        maximum: 4
        default: 1
      description:
        type: string
      title:
        type: string
      taskId:
        type: string
      dueDate:
        type: string
        format: date

  CompleteTask:
    type: object
    required:
      - taskId
    properties:
      taskId:
        type: string

  RegisterReturn:
    type: object
    properties:
      name:
        type: string
        example: John
      email:
        type: string
        example: a@123.com
      password:
        type: string
        example: AbraKaajshdi
      token:
        type: string

  LoginReturn:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
        example: a@123.com
      password:
        type: string
        example: AbraKaajshdi
      token:
        type: string

securityDefinitions:
  basicJwtAuth:
    type: apiKey
    in: header
    name: jwtToken
